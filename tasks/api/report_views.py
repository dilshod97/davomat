from django.db.models import OuterRef, Subquery
from django.http import HttpResponse
from rest_framework.views import APIView
from rest_framework.response import Response
from openpyxl import Workbook
from django.utils.timezone import make_aware
from django.db.models import Count, Case, When, Value, CharField
import io
from account.models import User
from rest_framework.permissions import IsAuthenticated
from datetime import datetime, time
from ..models import Attendance, Task


class DailyReportView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        is_excel = request.query_params.get("is_excel", "false").lower() == "true"
        day = request.query_params.get("day")  # masalan: 2025-10-20

        if not day:
            return Response({"error": "–°–∞–Ω–∞ –∫–∏—Ä–∏—Ç–∏–ª–º–∞–¥–∏ (day –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–µ—Ä–∞–∫)."}, status=400)

        try:
            day_obj = datetime.strptime(day, "%Y-%m-%d").date()
        except ValueError:
            return Response({"error": "–°–∞–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏ –Ω–æ—Ç—û“ì—Ä–∏. –ú–∞—Å–∞–ª–∞–Ω: 2025-10-20"}, status=400)

        user = request.user

        if user.as_user == 0:
            all_users = User.objects.filter(id=user.id)
        elif user.as_user == 1:
            if user.sector_id:
                all_users = User.objects.filter(sector_id=user.sector_id)
            else:
                return Response({"error": "Foydalanuvchi sektorga biriktirilmagan."}, status=400)
        elif user.as_user == 2:
            all_users = User.objects.all()

        else:
            return Response({"error": "as_user noto‚Äòg‚Äòri qiymatga ega."}, status=400)

        latest_attendance = Attendance.objects.filter(
            user=OuterRef("pk"), created_at__date=day_obj
        ).order_by("-created_at")

        data = []

        for user in all_users:
            rec = Attendance.objects.filter(
                user=user, created_at__date=day_obj
            ).order_by("-created_at").first()

            if rec:
                izoh = rec.task_description or ""
                holat = ""

                if not rec.timestamp:
                    holat = "–î–∞–≤–æ–º–∞—Ç –∫–∏—Ä–∏—Ç–º–∞–¥–∏"
                else:
                    if rec.created_at.time() > time(9, 0):
                        holat = "–ö–µ—á–∏–∫–¥–∏"
                    else:
                        holat = "–é–∑ –≤–∞“õ—Ç–∏–¥–∞ –∫–µ–ª–¥–∏"

                    if hasattr(rec, "distance") and rec.distance and rec.distance > 1000:
                        holat = "–®—É–±“≥–∞–ª–∏ (–∂–æ–π —É–∑–æ“õ)"
                        izoh += " | –ö–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω –ª–æ–∫–∞—Ü–∏—è –≤–∞ –æ–±—ä–µ–∫—Ç —û—Ä—Ç–∞—Å–∏–¥–∞–≥–∏ –º–∞—Å–æ—Ñ–∞ –∫–∞—Ç—Ç–∞."

                tasks = list(rec.task.values_list("task", flat=True))
                if tasks:
                    task_list = "\n".join([f"{i + 1}. {t}" for i, t in enumerate(tasks)])
                else:
                    task_list = "-"

                data.append({
                    "user": user.get_full_name() if hasattr(user, "get_full_name") else str(user),
                    "position": getattr(user, "position", "-"),
                    "entered_time": rec.timestamp.strftime("%Y-%m-%d %H:%M") if rec.timestamp else "-",
                    "system_time": rec.created_at.strftime("%Y-%m-%d %H:%M"),
                    "distance": f"{rec.distance} –º" if hasattr(rec, "distance") and rec.distance else "-",
                    "status": holat,
                    "tasks": task_list,
                    "where_is_it": rec.task_description,
                    "description": izoh,
                })
            else:
                # üîπ Agar user bu kunga hech narsa kiritmagan bo‚Äòlsa
                data.append({
                    "user": user.get_full_name() if hasattr(user, "get_full_name") else str(user),
                    "position": getattr(user, "position", "-"),
                    "entered_time": "-",
                    "system_time": "-",
                    "distance": "-",
                    "status": "–î–∞–≤–æ–º–∞—Ç –∫–∏—Ä–∏—Ç–º–∞–¥–∏",
                    "tasks": '',
                    "where_is_it": "-",
                    "description": "",
                })

        # üîπ Excel shaklda chiqarish
        if is_excel:
            wb = Workbook()
            ws = wb.active
            ws.title = "–ö—É–Ω–ª–∏–∫ “≥–∏—Å–æ–±–æ—Ç"

            headers = ["–•–æ–¥–∏–º", "–õ–∞–≤–æ–∑–∏–º–∏", "–ö–µ–ª–≥–∞–Ω –≤–∞“õ—Ç", "–¢–∏–∑–∏–º –≤–∞“õ—Ç–∏", "–ú–∞—Å–æ—Ñ–∞", "“≤–æ–ª–∞—Ç", "–ê–º–∞–ª–≥–∞ –æ—à–∏—Ä–∞–¥–∏–≥–∞–Ω –∏—à–ª–∞—Ä–∏", "“ö–∞–µ—Ä–¥–∞–ª–∏–≥–∏", "–ò–∑–æ“≥"]
            ws.append(headers)

            for row in data:
                ws.append(list(row.values()))

            file_stream = io.BytesIO()
            wb.save(file_stream)
            file_stream.seek(0)

            response = HttpResponse(
                file_stream,
                content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
            response["Content-Disposition"] = 'attachment; filename="kunlik_hisobot.xlsx"'
            return response

        return Response({"kun": day, "hisobot": data})


class PeriodReportView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        is_excel = request.query_params.get("is_excel", "false").lower() == "true"
        start_date = request.query_params.get("start_date")
        end_date = request.query_params.get("end_date")

        if not start_date or not end_date:
            return Response(
                {"error": "–°–∞–Ω–∞ –æ—Ä–∞–ª–∏“ì–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥: start_date –≤–∞ end_date –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–∞—Ä–∏ –∫–µ—Ä–∞–∫."},
                status=400,
            )

        try:
            start_obj = datetime.strptime(start_date, "%Y-%m-%d").date()
            end_obj = datetime.strptime(end_date, "%Y-%m-%d").date()
        except ValueError:
            return Response(
                {"error": "–°–∞–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏ –Ω–æ—Ç—û“ì—Ä–∏. –ú–∞—Å–∞–ª–∞–Ω: start_date=2025-10-01&end_date=2025-10-20"},
                status=400,
            )

        # mavjud holatlar ro‚Äòyxati
        descriptions = [
            "masofaviy",
            "obyekt_hudud",
            "idora",
            "ruxsat_olganman",
            "taatil",
            "tibbiy_korik_obyekt",
            "obyekt_tashkent",
            "kasal",
            "tibbiy_korik_idora",
        ]

        user = request.user

        if user.as_user == 0:
            all_users = User.objects.filter(id=user.id)
        elif user.as_user == 1:
            if user.sector_id:
                all_users = User.objects.filter(sector_id=user.sector_id)
            else:
                return Response({"error": "Foydalanuvchi sektorga biriktirilmagan."}, status=400)
        elif user.as_user == 2:
            all_users = User.objects.all()

        else:
            return Response({"error": "as_user noto‚Äòg‚Äòri qiymatga ega."}, status=400)
        data = []

        for user in all_users:
            recs = Attendance.objects.filter(
                user=user,
                created_at__date__range=[start_obj, end_obj]
            ).order_by("created_at")

            if recs.exists():
                jami = recs.count()
                kechikkanlar = recs.filter(created_at__time__gt=time(9, 0)).count()
                shubhali = recs.filter(latitude__isnull=True, longitude__isnull=True).count()

                oxirgisi = recs.last()

                # Amalga oshirilgan ishlar
                tasks = Task.objects.filter(attendance__in=recs).distinct()
                task_list = "\n".join([f"{i + 1}. {t.task}" for i, t in enumerate(tasks)]) if tasks else "-"

                # har bir task_description bo‚Äòyicha sanash
                desc_counts = {}
                for desc in descriptions:
                    desc_counts[desc] = recs.filter(task_description=desc).count()

                row = {
                    "user": user.get_full_name() if hasattr(user, "get_full_name") else str(user),
                    "position": getattr(user, "position", "-"),
                    "jami_kiritilgan": jami,
                    "kechikkanlar": kechikkanlar,
                    "shubhali_holatlar": shubhali,
                    "songgi_kiritilgan_vaqt": oxirgisi.created_at.strftime("%Y-%m-%d %H:%M"),
                    "amalga_oshirilgan_ishlar": task_list,
                }
                row.update(desc_counts)
                data.append(row)
            else:
                # hech narsa kiritmagan foydalanuvchi
                row = {
                    "user": user.get_full_name() if hasattr(user, "get_full_name") else str(user),
                    "position": getattr(user, "position", "-"),
                    "jami_kiritilgan": 0,
                    "kechikkanlar": 0,
                    "shubhali_holatlar": 0,
                    "songgi_kiritilgan_vaqt": "-",
                    "amalga_oshirilgan_ishlar": "-",
                }
                # nol holatlar uchun ham fieldlar bo‚Äòlishi kerak
                for desc in descriptions:
                    row[desc] = 0
                data.append(row)

        # üî∏ Excel eksport
        if is_excel:
            wb = Workbook()
            ws = wb.active
            ws.title = "–î–∞–≤—Ä “≥–∏—Å–æ–±–æ—Ç–∏"

            headers = [
                "–•–æ–¥–∏–º",
                "–õ–∞–≤–æ–∑–∏–º–∏",
                "–ñ–∞–º–∏ –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω",
                "–ö–µ—á–∏–∫–∫–∞–Ω–ª–∞—Ä —Å–æ–Ω–∏",
                "–®—É–±“≥–∞–ª–∏ “≥–æ–ª–∞—Ç–ª–∞—Ä",
                "–°—û–Ω–≥–≥–∏ –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω –≤–∞“õ—Ç",
                "–ê–º–∞–ª–≥–∞ –æ—à–∏—Ä–≥–∞–Ω –∏—à–ª–∞—Ä–∏",
            ] + descriptions

            ws.append(headers)

            for row in data:
                ws.append([row.get(h, "") for h in row.keys()])

            file_stream = io.BytesIO()
            wb.save(file_stream)
            file_stream.seek(0)

            response = HttpResponse(
                file_stream,
                content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
            response["Content-Disposition"] = 'attachment; filename="davr_hisobot.xlsx"'
            return response

        # üî∏ JSON qaytarish
        return Response({
            "davr": f"{start_date} ‚Äî {end_date}",
            "hisobot": data
        })


class BandlikHisobotAPIView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        day = request.query_params.get("day")
        is_excel = request.query_params.get("is_excel", "false").lower() == "true"

        if not day:
            return Response({"error": "day –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏. –ú–∞—Å–∞–ª–∞–Ω: ?day=2025-10-20"}, status=400)

        try:
            day_obj = datetime.strptime(day, "%Y-%m-%d").date()
        except ValueError:
            return Response({"error": "–°–∞–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏ –Ω–æ—Ç—û“ì—Ä–∏. –ú–∞—Å–∞–ª–∞–Ω: ?day=2025-10-20"}, status=400)

        start = make_aware(datetime.combine(day_obj, datetime.min.time()))
        end = make_aware(datetime.combine(day_obj, datetime.max.time()))

        queryset = (
            Attendance.objects
            .filter(timestamp__range=[start, end])
            .annotate(
                bandlik_turi=Case(
                    When(task_description="idora", then=Value("–ò–¥–æ—Ä–∞–¥–∞")),
                    When(task_description="obyekt_tashkent", then=Value("–û–±—ä–µ–∫—Ç–¥–∞ (–¢–æ—à–∫–µ–Ω—Ç —à.)")),
                    When(task_description="obyekt_hudud", then=Value("–û–±—ä–µ–∫—Ç–¥–∞ (“≤—É–¥—É–¥)")),
                    When(task_description__in=["tibbiy_korik_obyekt", "tibbiy_korik_idora"], then=Value("–¢–∏–±–±–∏–π –∫—û—Ä–∏–∫")),
                    When(task_description="kasal", then=Value("–ö–∞—Å–∞–ª")),
                    When(task_description="masofaviy", then=Value("–ú–∞—Å–æ—Ñ–∞–≤–∏–π")),
                    When(task_description="taatil", then=Value("–¢–∞—ä—Ç–∏–ª")),
                    When(task_description="ruxsat_olganman", then=Value("–†—É—Ö—Å–∞—Ç –æ–ª–≥–∞–Ω")),
                    default=Value("–ù–æ–º–∞—ä–ª—É–º"),
                    output_field=CharField(),
                )
            )
            .values("bandlik_turi", "task_description")
            .annotate(soni=Count("user", distinct=True))
        )

        # üîπ Natijalarni dict shaklida tayyorlash
        data = {}
        for item in queryset:
            key = item["task_description"]
            bandlik_turi = item["bandlik_turi"]
            soni = item["soni"]
            data[key] = {"bandlik_turi": bandlik_turi, "soni": soni}

        jami_xodimlar = User.objects.count()

        # üîπ Tartib (key + label)
        tartib = [
            {"key": "idora", "label": "–ò–¥–æ—Ä–∞–¥–∞"},
            {"key": "obyekt_tashkent", "label": "–û–±—ä–µ–∫—Ç–¥–∞ (–¢–æ—à–∫–µ–Ω—Ç —à.)"},
            {"key": "obyekt_hudud", "label": "–û–±—ä–µ–∫—Ç–¥–∞ (“≤—É–¥—É–¥)"},
            {"key": "tibbiy_korik_obyekt", "label": "–¢–∏–±–±–∏–π –∫—û—Ä–∏–∫"},
            {"key": "kasal", "label": "–ö–∞—Å–∞–ª"},
            {"key": "masofaviy", "label": "–ú–∞—Å–æ—Ñ–∞–≤–∏–π"},
            {"key": "taatil", "label": "–¢–∞—ä—Ç–∏–ª"},
            {"key": "ruxsat_olganman", "label": "–†—É—Ö—Å–∞—Ç –æ–ª–≥–∞–Ω"},
        ]

        rows = [
            {
                "key": t["key"],
                "bandlik_turi": t["label"],
                "soni": data.get(t["key"], {}).get("soni", 0),
            }
            for t in tartib
        ]

        # üîπ Jami qator
        rows.append({"key": "jami", "bandlik_turi": "–ñ–∞–º–∏", "soni": jami_xodimlar})

        # üîπ Excel
        if is_excel:
            wb = Workbook()
            ws = wb.active
            ws.title = "–ë–∞–Ω–¥–ª–∏–∫ “≥–∏—Å–æ–±–æ—Ç–∏"

            ws.append(["‚Ññ", "–ö–∞–ª–∏—Ç (key)", "–ë–∞–Ω–¥–ª–∏–∫ —Ç—É—Ä–∏", "–°–æ–Ω–∏"])
            for i, row in enumerate(rows, start=1):
                ws.append([i, row["key"], row["bandlik_turi"], row["soni"]])

            file_stream = io.BytesIO()
            wb.save(file_stream)
            file_stream.seek(0)

            response = HttpResponse(
                file_stream,
                content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
            response["Content-Disposition"] = f'attachment; filename="bandlik_hisobot_{day}.xlsx"'
            return response

        # üîπ JSON shaklida qaytarish
        return Response({
            "day": str(day_obj),
            "hisobot": rows
        })
